// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pump_equipment.Data.Context;

#nullable disable

namespace Pump_equipment.Data.Migrations
{
    [DbContext(typeof(PumpDbContext))]
    partial class PumpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pump_equipment.Data.Entities.MaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Pump_equipment.Data.Entities.MotorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Motor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NominalSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Motors");
                });

            modelBuilder.Entity("Pump_equipment.Data.Entities.PumpEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ImpellerMaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialHullId")
                        .HasColumnType("uuid");

                    b.Property<double>("MaxPressure")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MotorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ImpellerMaterialId");

                    b.HasIndex("MaterialHullId");

                    b.HasIndex("MotorId");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("Pump_equipment.Data.Entities.PumpEntity", b =>
                {
                    b.HasOne("Pump_equipment.Data.Entities.MaterialEntity", "ImpellerMaterial")
                        .WithMany("ImpellerMaterialPumps")
                        .HasForeignKey("ImpellerMaterialId");

                    b.HasOne("Pump_equipment.Data.Entities.MaterialEntity", "MaterialHull")
                        .WithMany("BodyMaterialPumps")
                        .HasForeignKey("MaterialHullId");

                    b.HasOne("Pump_equipment.Data.Entities.MotorEntity", "Motor")
                        .WithMany("Pumps")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImpellerMaterial");

                    b.Navigation("MaterialHull");

                    b.Navigation("Motor");
                });

            modelBuilder.Entity("Pump_equipment.Data.Entities.MaterialEntity", b =>
                {
                    b.Navigation("BodyMaterialPumps");

                    b.Navigation("ImpellerMaterialPumps");
                });

            modelBuilder.Entity("Pump_equipment.Data.Entities.MotorEntity", b =>
                {
                    b.Navigation("Pumps");
                });
#pragma warning restore 612, 618
        }
    }
}
